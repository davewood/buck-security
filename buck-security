#!/usr/bin/perl

use strict;
use warnings;

# Perl Core Modules
use File::Basename;
use File::Spec;
use Term::ANSIColor;    # for colours
use POSIX qw(nice);     # for nice
use Getopt::Long;       # for command line options
use Pod::Usage;         # for help output
use Time::localtime;    # for log filename
POSIX::nice(19);        # run with low priority

use Data::Dumper;       # for debugging only


# Buck Modules
use lib "checks";
use lib "checks/lib";
use lib "lib";

my $buck_root = ".";

# VERSION
my $VERSION = '0.7';

# start time
my $start_time = time();


my $man        = 0;
my $help       = 0;
my $opt_output = 0;    # verbose level: via --output=X   2 is default
my $opt_log    = 0;     # Log? via --log
my $opt_checksum = 0;
my $opt_sysroot = '';
my $opt_disable_checks = '';
my $opt_no_sudo = 0;
GetOptions(
    'output=i'         => \$opt_output,
    'log:s'            => \$opt_log,
    'help|?'           => \$help,
     man               => \$man,
    'make-checksums'   => \$opt_checksum,
    'sysroot=s'        => \$opt_sysroot,
    'disable-checks=s'  => \$opt_disable_checks,
    'no-sudo'          => \$opt_no_sudo
) ||
pod2usage(
    -message => "\n",
    -exitval => 1,
    -verbose => 1
);


# Output Help if needed via pod2usage
pod2usage(
    -message => "\n",
    -exitval => 0,
    -verbose => 1
) if $help;

pod2usage( -exitval => 0,
           -verbose => 2
) if $man;

pod2usage( -exitval => 1,
           -verbose => 2,
           -message => "Can not log or check if generating initial checksums for files.\n"
) if $opt_checksum && ( $opt_log || $opt_disable_checks );

if ( ! $opt_no_sudo && $> != 0 ) {
    print STDERR "Specify -no-sudo if you wish to run not as root.\n";
    exit 1;
}

# Read Config file
my $config_file = File::Spec->catfile($buck_root, "conf/buck-security.conf");
if ( ! -f $config_file ) {
    print STDERR "The configuration file $config_file was not found.\n";
    exit 1;
}

{ package Config; do $config_file }

if ( $opt_output != 0 ) {
    if ( grep { $_ == $opt_output } (1, 2) ) {
        no warnings;
        $Config::output = $opt_output;
    }
    else {
        print STDERR "Unknown output format $opt_output specified.\n";
        exit 1;
    }
}

if ( $opt_sysroot ) {
    $Config::sysroot = $opt_sysroot;
}
$Config::sysroot = File::Spec->rel2abs( $Config::sysroot );
if ( ! -d $Config::sysroot ) {
    print STDERR "The specified sysroot $Config::sysroot does not exist.\n";
    exit 1;
}

$Config::buck_root = $buck_root;

my %disabled_checks = map { $_ => 1 } split( /,/, $opt_disable_checks );
@Config::checks = grep( ! defined $disabled_checks { $_ }, @Config::checks);

$Config::ssh_config =
  File::Spec->catfile( $Config::sysroot, $Config::ssh_config );

$Config::checksum_file =
  File::Spec->catfile( $Config::buck_root, $Config::checksum_file );
@Config::checksum_dir =
  map {File::Spec->catfile( $Config::sysroot, $_ )} @Config::checksum_dir;

$Config::logdir =
  File::Spec->catdir( $Config::buck_root, $Config::logdir );


# The -log flag has been set but no log file has been specified.
if ( $opt_log eq '' ) {

    if ( ! -d $Config::logdir ) {
        print STDERR "The specified log directory $Config::logdir does not exist.\n";
        exit 1;
    }

    # Get Date for filename of log
    my $year  = localtime->year() + 1900;
    my $day   = sprintf( "%02d", localtime->mday() );
    my $month = localtime->mon() + 1;
    $month = sprintf( "%02d", $month );
    my $hour  = sprintf( "%02d", localtime->hour() );
    my $min   = sprintf( "%02d", localtime->min() );
    my $sec   = sprintf( "%02d", localtime->sec() );
    my $date  = $day . $month . $year . "_$hour-$min-$sec";

    $opt_log = File::Spec->catfile( $Config::logdir, "buck$date.log" );
}

if ($opt_checksum != 0) {
    use mkchecksum;
    mkchecksum->MkChecksum();
    exit;
}


# Number of checks
my $nr_of_checks = @Config::checks;

# Print Header
print color 'bold blue';
my $line = "###########################";
print "\n\n\n$line\n#   buck-security $VERSION     #\n$line\n";
print
"\nWe will run $nr_of_checks security checks now.\nThis may take a while...\n";




my $log;    # String which the Log is written to, later written to fike

# sub which decides if a log should be written (if --log was given) or not, used instead of print
sub logprint {
    my $string = shift;    # string given to sub

    #log only
    if ($opt_log) {
        $log .= $string;    # add string to log string
    }

    #print only
    else {
        print $string;
    }
    return;
}

# Execute the checks specified in the config file
my $nr = 1;
foreach (@Config::checks)
{    # reads the array from the config file with name of checks
    my $pack = $_;               # Package-Name
    my $mod  = $pack . '.pm';    # Module Name
    require $mod;
    my ( $title, $result, $help_msg, $details_ref, $outcome_type) =
      $pack->check();    # run check sub in check module
    my $first_line = sprintf( "%-60s", "[$nr] CHECK $pack: $title " );
    logprint("\n\n$first_line");    # print title of check
    if ( $result != 0 ) {    # if something found print [WARNING]
        print color 'bold red';
        logprint("[ WARNING ]\n");
        print color 'reset';    # normal
        my @details = @ { $details_ref };
        my $details;
        if ( $result == 2 ) {
            logprint("The security test encountered the following error during execution.\n");
            $details = join( "", @details );
        }
        else {
            logprint("The security test discovered a possible insecurity.\n");
            logprint("$help_msg$line$line\n");
            @details = sort( @details );
            if ( $outcome_type eq "abspath" ) {
                @details = map { substr( $_, length( $Config::sysroot ) ) } @details;
                if ( $Config::output > 1 ) {
                    logprint("Pathnames are relative to $Config::sysroot.\n");
                }
            }
            $details = join( "\n", @details );
        }
        logprint("$details\n") if ( $Config::output > 1 );
    }
    else {                      # if nothing found print [OK]
        print color 'bold green';
        logprint("[ OK ]\n");
        print color 'reset';
    }
    print color 'bold blue';

    $nr++;
}

# end time
my $end_time = time();

# print time it took
print "\n\n$line\n###   CHECKS FINISHED   ###\n";
print "time taken was " . ( $end_time - $start_time ) . " seconds\n";
print $line;

# Footer
print
"\n\nATTENTION:\nbuck-security is still under development, consider this a beta version.\nYour feedback is welcome, please send it to martin[at]bartenberger.de.\nTo get help run './buck --help' \n\n\n";

print color 'reset';



if ($opt_log) {
    open my $LOG, '>', $opt_log or die $!;
    print $LOG $log;
    close($LOG);
}

# Documentation

# POD

__DATA__

=head1 NAME

Buck Security

=head1 SYNOPSIS


 --help
 show help

 --make-checksum
 create checksums of important programs to recheck them with buck-security
 later

 --log=<logfile>
 log output to specified file. If flag is set but no file is specified the
 log file path is auto-generated.

 --output=1
 short output, show result only

 --output=2 (default)
 default output, show details (which files/dirs where found f.e.)

 --sysroot=<root>
 specify the root directory of the filesystem to be analyzed

 --disable-checks=<checks>
 a comma separated list of checks to disable

 --no-sudo
 do not require the user running the script to be super



=head1 FURTHER INFORMATION

To get further information mail to martin[at]bartenberger.de

=cut

